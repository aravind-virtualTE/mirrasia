name: ec2 testing Deployment
 
on:
  push:
    branches:
      - main
jobs:      
  DeployOnEc2:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1
 
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 20
 
    - name: Install dependencies
      run: npm install --legacy-peer-deps
 
    # login to aws first 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    # - name: CHECK FOR THE BRANCH NAME CONVENTION 
      # run: |
      #   branch_name=main
      #     echo "$branch_name"
      #     if [[ "$branch_name" != */* ]]; then
      #       echo "Invalid branch name format. Workflow canceled."
      #       exit 1
      #     fi
 
      #     IFS='/' read -ra branch_parts <<< "$branch_name"
      #     if [ "${#branch_parts[@]}" -ne 2 ]; then
      #       echo "Invalid branch name format. Workflow canceled."
      #       exit 1
      #     fi
 
      #     bucket_name="${branch_parts[0]}"
      #     file_name="${branch_parts[1]}.json"
      #     echo "bucketName=$bucket_name" >> $GITHUB_ENV
      #     echo "fileName=$file_name" >> $GITHUB_ENV
      #     echo "ENVIRONMENT_NAME=${branch_parts[0]}" >> $GITHUB_ENV
      #     echo "WHITELABEL_NAME=${branch_parts[1]}" >> $GITHUB_ENV
    # - name: Print Branch Name
    #   run: |
    #     echo "Branch Name: $GITHUB_REF"
 
    # - name: Fetch .env file from S3
    #   run: |
    #     aws s3 cp s3://whitelabel-env/${{ env.ENVIRONMENT_NAME }}/${{ env.WHITELABEL_NAME }}.env .env
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
 
    - name: Build
      run: CI="" npm run build

    # - name: Deploy static site to S3 bucket
    - name: Deploy static site to S3 bucket
      run: aws s3 sync ./dist/ s3://mirrasia --delete   